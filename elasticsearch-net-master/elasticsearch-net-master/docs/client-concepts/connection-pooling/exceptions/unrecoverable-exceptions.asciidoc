:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/ClientConcepts/ConnectionPooling/Exceptions/UnrecoverableExceptions.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[unrecoverable-exceptions]]
=== Unrecoverable exceptions

Unrecoverable exceptions are _expected_ exceptions that are grounds to exit the client pipeline immediately.

[NOTE]
--
What do we mean by _expected_ exceptions? Aren't all exceptions _exceptional_?

Well, there a some exceptions that can be thrown in the course of a request
that _may_ be expected, some of which can be retried on another node in the cluster, and some that cannot.
For example, an exception thrown when pinging a node throws an exception,
but this is an exception that the client expects can happen,
and can handle by trying a ping on another node. On the contrary, a bad authentication response from a node will throw an
exception, and the client understands that an exception under these circumstances should be handled by not retrying,
but by exiting the pipeline.

--

By default, the client won't throw on any `ElasticsearchClientException` but instead return an invalid response
that can be detected by checking the `.IsValid` property on the response. You can change this behaviour with
by using `ThrowExceptions()` on <<configuration-options, `ConnectionSettings`>>.

The following is a collection of unrecoverable exceptions 

[source,csharp]
----
var unrecoverableExceptions = new[]
{
    new PipelineException(PipelineFailure.CouldNotStartSniffOnStartup),
    new PipelineException(PipelineFailure.SniffFailure),
    new PipelineException(PipelineFailure.Unexpected),
    new PipelineException(PipelineFailure.BadAuthentication),
    new PipelineException(PipelineFailure.MaxRetriesReached),
    new PipelineException(PipelineFailure.MaxTimeoutReached)
};

unrecoverableExceptions.Should().OnlyContain(e => !e.Recoverable);
----

As an example, let's use our Virtual cluster test framework to set up a 10 node cluster
that always succeeds when pinged but fails with a 401 response when making client calls

[source,csharp]
----
var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways()) <1>
    .ClientCalls(r => r.FailAlways(401)) <2>
    .StaticConnectionPool()
    .AllDefaults()
);
----
<1> Always succeed on ping
<2> ...but always fail on calls with a 401 Bad Authentication response

Now, let's make a client call. We'll see that the first audit event is a successful ping
followed by a bad response as a result of the 401 bad authentication response

[source,csharp]
----
audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 }, <1>
        { AuditEvent.BadResponse, 9200 }, <2>
    },
    exception =>
    {
        exception.FailureReason
            .Should().Be(PipelineFailure.BadAuthentication); <3>
    }
);
----
<1> First call results in a successful ping
<2> Second call results in a bad response
<3> The reason for the bad response is Bad Authentication

When a bad authentication response occurs, the client does not attempt to deserialize the response body returned;
The response may or may not have a body and even when it does, it may not even be JSON.

In the following couple of examples, we set up a cluster that always returns a typical nginx HTML response body
with 401 response to client calls. In this first example, we assert that the failure is because of a 401 Bad Authentication
response but the response body is not captured on the response

[source,csharp]
----
var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways())
    .ClientCalls(r => r.FailAlways(401).ReturnResponse(HtmlNginx401Response)) <1>
    .StaticConnectionPool()
    .AllDefaults()
);

audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 },
        { AuditEvent.BadResponse, 9200 },
    },
    (e) =>
    {
        e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
        e.Response.HttpStatusCode.Should().Be(401);
        e.Response.ResponseBodyInBytes.Should().BeNull(); <2>
    }
);
----
<1> Always return a 401 bad response with a HTML response on client calls
<2> Assert that the response body bytes are null

Now in this example, by turning on `DisableDirectStreaming()` on `ConnectionSettings`, we see the same behaviour exhibited
as before, but this time however, the response body bytes are captured in the response and can be inspected.

[source,csharp]
----
var audit = new Auditor(() => Framework.Cluster
    .Nodes(10)
    .Ping(r => r.SucceedAlways())
    .ClientCalls(r => r.FailAlways(401).ReturnResponse(HtmlNginx401Response))
    .StaticConnectionPool()
    .Settings(s => s.DisableDirectStreaming())
);

audit = await audit.TraceElasticsearchException(
    new ClientCall {
        { AuditEvent.PingSuccess, 9200 },
        { AuditEvent.BadResponse, 9200 },
    },
    (e) =>
    {
        e.FailureReason.Should().Be(PipelineFailure.BadAuthentication);
        e.Response.HttpStatusCode.Should().Be(401);
        e.Response.ResponseBodyInBytes.Should().NotBeNull(); <1>
        var responseString = Encoding.UTF8.GetString(e.Response.ResponseBodyInBytes);
        responseString.Should().Contain("nginx/"); <2>
        e.DebugInformation.Should().Contain("nginx/");
    }
);
----
<1> Response bytes are set on the response
<2> Assert that the response contains `"nginx/"`

