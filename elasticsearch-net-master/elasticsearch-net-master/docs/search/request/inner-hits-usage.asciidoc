:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Search/Request/InnerHitsUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[inner-hits-usage]]
== Inner Hits Usage

The {ref_current}/mapping-parent-field.html[parent/child] and {ref_current}/nested.html[nested] features allow the
return of documents that have matches in a different scope.
In the parent/child case, parent document are returned based on matches in child documents or child document
are returned based on matches in parent documents. In the nested case, documents are returned based on matches in nested inner objects.

In both cases, the actual matches in the different scopes that caused a document to be returned is hidden.
In many cases, itâ€™s very useful to know _which_ inner nested objects (in the case of nested) or children/parent
documents (in the case of parent/child) caused certain information to be returned.
The inner hits feature can be used for this. This feature returns per search hit in the search response additional
nested hits that caused a search hit to match in a different scope.

Inner hits can be used by defining an `inner_hits` definition on a `nested`, `has_child` or `has_parent` query and filter.

See the Elasticsearch documentation on {ref_current}/search-request-inner-hits.html[Inner hits] for more detail.

[float]
=== Query Inner Hits

[float]
=== Fluent DSL example

[source,csharp]
----
s => s
.Index(Index)
.Query(q =>
    q.HasChild<Prince>(hc => hc
        .Query(hcq => hcq.MatchAll())
        .InnerHits(ih => ih.Name("princes"))
    ) || q.Nested(n => n
        .Path(p => p.Foes)
        .Query(nq => nq.MatchAll())
        .InnerHits()
    )
)
----

[float]
=== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<King>(Index, typeof(King))
{
    Query = new HasChildQuery
    {
        Type = typeof(Prince),
        Query = new MatchAllQuery(),
        InnerHits = new InnerHits { Name = "princes" }
    } || new NestedQuery
    {
        Path = Field<King>(p => p.Foes),
        Query = new MatchAllQuery(),
        InnerHits = new InnerHits()
    }
}
----

[source,javascript]
.Example json output
----
{
  "query": {
    "bool": {
      "should": [
        {
          "has_child": {
            "type": "prince",
            "query": {
              "match_all": {}
            },
            "inner_hits": {
              "name": "princes"
            }
          }
        },
        {
          "nested": {
            "query": {
              "match_all": {}
            },
            "path": "foes",
            "inner_hits": {}
          }
        }
      ]
    }
  }
}
----

[float]
=== Handling Responses

[source,csharp]
----
response.Hits.Should().NotBeEmpty();
foreach (var hit in response.Hits)
{
    var princes = hit.InnerHits["princes"].Documents<Prince>();
    princes.Should().NotBeEmpty();

    var foes = hit.InnerHits["foes"].Documents<King>();
    foes.Should().NotBeEmpty();
};
----

