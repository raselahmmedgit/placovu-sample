:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Search/Search/Collapsing/FieldCollapseUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[field-collapse-usage]]
=== Field Collapse Usage

==== Fluent DSL example

[source,csharp]
----
s => s
.Collapse(c => c
    .Field(f => f.State)
    .MaxConcurrentGroupSearches(1000)
    .InnerHits(i => i
        .Name(nameof(StateOfBeing).ToLowerInvariant())
        .Size(5)
        .From(1)
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<Project>
{
    Collapse = new FieldCollapse
    {
        Field = Field<Project>(p => p.State),
        MaxConcurrentGroupSearches = 1000,
        InnerHits = new InnerHits
        {
            Name = nameof(StateOfBeing).ToLowerInvariant(),
            Size = 5,
            From = 1
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "collapse": {
    "field": "state",
    "max_concurrent_group_searches": 1000,
    "inner_hits": {
      "from": 1,
      "name": "stateofbeing",
      "size": 5
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
var numberOfStates = Enum.GetValues(typeof(StateOfBeing)).Length;
response.HitsMetaData.Total.Should().BeGreaterThan(numberOfStates);
response.Hits.Count.Should().Be(numberOfStates);
foreach (var hit in response.Hits)
{
    var name = nameof(StateOfBeing).ToLowerInvariant();
    hit.InnerHits.Should().NotBeNull().And.ContainKey(name);
    var innherHits = hit.InnerHits[name];
    innherHits.Hits.Total.Should().BeGreaterThan(0);
}
----

