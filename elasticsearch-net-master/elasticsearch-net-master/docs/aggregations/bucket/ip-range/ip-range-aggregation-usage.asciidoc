:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Aggregations/Bucket/IpRange/IpRangeAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[ip-range-aggregation-usage]]
=== Ip Range Aggregation Usage

==== Fluent DSL example

[source,csharp]
----
s => s
.Aggregations(a => a
    .IpRange("ip_ranges", ip => ip
        .Field(p => p.LeadDeveloper.IPAddress)
        .Ranges(
            r => r.To("10.0.0.5"),
            r => r.From("10.0.0.5")
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<Project>
{
    Aggregations = new IpRangeAggregation("ip_ranges")
    {
        Field = Field((Project p) => p.LeadDeveloper.IPAddress),
        Ranges = new List<Nest.IpRange>
        {
            new Nest.IpRange { To = "10.0.0.5" },
            new Nest.IpRange { From = "10.0.0.5" }
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "aggs": {
    "ip_ranges": {
      "ip_range": {
        "field": "leadDeveloper.iPAddress",
        "ranges": [
          {
            "to": "10.0.0.5"
          },
          {
            "from": "10.0.0.5"
          }
        ]
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
var ipRanges = response.Aggs.IpRange("ip_ranges");
ipRanges.Should().NotBeNull();
ipRanges.Buckets.Should().NotBeNull();
ipRanges.Buckets.Count.Should().BeGreaterThan(0);
foreach (var range in ipRanges.Buckets)
    range.DocCount.Should().BeGreaterThan(0);
----

