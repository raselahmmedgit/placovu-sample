:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/Aggregations/Bucket/Filter/FilterAggregationUsageTests.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[filter-aggregation-usage]]
=== Filter Aggregation Usage

Defines a single bucket of all the documents in the current document set context that match a specified filter.
Often this will be used to narrow down the current aggregation context to a specific set of documents.

Be sure to read the Elasticsearch documentation on {ref_current}/search-aggregations-bucket-filter-aggregation.html[Filter Aggregation]

==== Fluent DSL example

[source,csharp]
----
s => s
.Aggregations(aggs => aggs
    .Filter("bethels_projects", date => date
        .Filter(q => q.Term(p => p.LeadDeveloper.FirstName, FirstNameToFind))
        .Aggregations(childAggs => childAggs
            .Terms("project_tags", avg => avg.Field(p => p.CuratedTags.First().Name.Suffix("keyword")))
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<Project>
{
    Aggregations = new FilterAggregation("bethels_projects")
    {
        Filter = new TermQuery {Field = Field<Project>(p => p.LeadDeveloper.FirstName), Value = FirstNameToFind},
        Aggregations =
            new TermsAggregation("project_tags") { Field = Field<Project>(p => p.CuratedTags.First().Name.Suffix("keyword")) }
    }
}
----

[source,javascript]
.Example json output
----
{
  "aggs": {
    "bethels_projects": {
      "filter": {
        "term": {
          "leadDeveloper.firstName": {
            "value": "pierce"
          }
        }
      },
      "aggs": {
        "project_tags": {
          "terms": {
            "field": "curatedTags.name.keyword"
          }
        }
      }
    }
  }
}
----

=== Handling Responses

Using the `.Aggs` aggregation helper we can fetch our aggregation results easily
in the correct type. <<aggs-vs-aggregations, Be sure to read more about .Aggs vs .Aggregations>>

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();

var filterAgg = response.Aggs.Filter("bethels_projects");
filterAgg.Should().NotBeNull();
filterAgg.DocCount.Should().BeGreaterThan(0);
var tags = filterAgg.Terms("project_tags");
tags.Should().NotBeNull();
tags.Buckets.Should().NotBeEmpty();
----

[float]
== Empty Filter

When the collection of filters is empty or all are conditionless, NEST will serialize them
to an empty object.

==== Fluent DSL example

[source,csharp]
----
s => s
.Aggregations(aggs => aggs
    .Filter("empty_filter", date => date
        .Filter(f => f
            .Bool(b => b
                .Filter(new QueryContainer[0])
            )
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<Project>
{
    Aggregations = new FilterAggregation("empty_filter")
    {
        Filter = new BoolQuery
        {
            Filter = new List<QueryContainer>()
        }
    }
}
----

[source,javascript]
.Example json output
----
{
  "aggs": {
    "empty_filter": {
      "filter": {}
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
response.Aggs.Filter("empty_filter").DocCount.Should().BeGreaterThan(0);
----

==== Fluent DSL example

[source,csharp]
----
s => s
.Aggregations(aggs => aggs
    .Filter(_aggName, date => date
        .Filter(f => f
            .Script(b => b
                .Inline(_ctxNumberofCommits)
                .Lang("groovy")
            )
        )
    )
)
----

==== Object Initializer syntax example

[source,csharp]
----
new SearchRequest<Project>
{
    Aggregations = new FilterAggregation(_aggName)
    {
        Filter = new ScriptQuery
        {
            Inline = _ctxNumberofCommits,
            Lang = "groovy"
    }
    }
}
----

[source,javascript]
.Example json output
----
{
  "aggs": {
    "script_filter": {
      "filter": {
        "script": {
          "script": {
            "inline": "_source.numberOfCommits > 0",
            "lang": "groovy"
          }
        }
      }
    }
  }
}
----

==== Handling Responses

[source,csharp]
----
response.ShouldBeValid();
response.Aggs.Filter(_aggName).DocCount.Should().BeGreaterThan(0);
----

