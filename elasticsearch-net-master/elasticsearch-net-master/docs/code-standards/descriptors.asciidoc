:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/CodeStandards/Descriptors.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[descriptors]]
=== Descriptors

Every descriptor should inherit from `DescriptorBase`, this hides object members from the fluent interface

[source,csharp]
----
var notDescriptors = new[] { typeof(ClusterProcessOpenFileDescriptors).Name, "DescriptorForAttribute" };

var descriptors = from t in typeof(DescriptorBase<,>).Assembly().Types()
                  where t.IsClass()
                    && t.Name.Contains("Descriptor")
                    && !notDescriptors.Contains(t.Name)
#if __MonoCS__
                    && !t.FullName.Contains("c__AnonStore") //compiler generated
#endif
                    && t.GetInterfaces().All(i => i != typeof(IDescriptor))
                  select t.FullName;
descriptors.Should().BeEmpty();
----

Methods taking a func should have that func return an interface

[source,csharp]
----
var descriptors =
    from t in typeof(DescriptorBase<,>).Assembly().Types()
    where t.IsClass() && typeof(IDescriptor).IsAssignableFrom(t)
    select t;

var exclusions = new Dictionary<Type, Type>
{
    { typeof(QueryContainerDescriptor<>), typeof(QueryContainer) },
    { typeof(ConditionDescriptor), typeof(ConditionContainer) },
    { typeof(TriggerDescriptor), typeof(TriggerContainer) },
    { typeof(TransformDescriptor), typeof(TransformContainer) },
    { typeof(SmoothingModelContainerDescriptor), typeof(SmoothingModelContainer) },
    { typeof(InputDescriptor), typeof(InputContainer) },
    { typeof(FluentDictionary<,>), typeof(FluentDictionary<,>) }
};

Func<Type, Type, bool> exclude = (first, second) =>
{
    var key = first.IsGenericType()
        ? first.GetGenericTypeDefinition()
        : first;

    Type value;
    if (!exclusions.TryGetValue(key, out value))
        return false;

    return second.IsGenericType()
        ? second.GetGenericTypeDefinition() == value
        : value.IsAssignableFrom(second);
};

var selectorMethods =
    from d in descriptors
    from m in d.GetMethods()
    let parameters = m.GetParameters()
    from p in parameters
    let type = p.ParameterType
    let isGeneric = type.IsGenericType()
    where isGeneric
    let isFunc = type.GetGenericTypeDefinition() == typeof(Func<,>)
    where isFunc
    let firstFuncArg = type.GetGenericArguments().First()
    let secondFuncArg = type.GetGenericArguments().Last()
    where !exclude(firstFuncArg, secondFuncArg)
    let lastArgIsNotInterface = !secondFuncArg.IsInterface()
    where lastArgIsNotInterface
    select $"{m.Name} on {m.DeclaringType.Name}";

selectorMethods.Should().BeEmpty();
----

Descriptor methods that assign to a nullable bool property should accept
a nullable bool with a default value

[source,csharp]
----
var queries =
    from t in typeof(IQuery).Assembly().Types()
    where t.IsInterface() && typeof(IQuery).IsAssignableFrom(t)
    where t.GetProperties().Any(p => p.PropertyType == typeof(bool?))
    select t;

var descriptors =
    from t in typeof(DescriptorBase<,>).Assembly().Types()
    where t.IsClass() && typeof(IDescriptor).IsAssignableFrom(t)
    where t.GetInterfaces().Intersect(queries).Any()
    select t;

var breakingDescriptors = new List<string>();

foreach (var query in queries)
{
    var descriptor = descriptors.First(d => query.IsAssignableFrom(d));
    foreach (var boolProperty in query.GetProperties().Where(p => p.PropertyType == typeof(bool?)))
    {
        var descriptorMethod = descriptor.GetMethod(boolProperty.Name);
        if (descriptorMethod == null)
            throw new Exception($"No method for property {boolProperty.Name} on {descriptor.Name}");

        var parameters = descriptorMethod.GetParameters();

        if (!parameters.Any())
            throw new Exception($"No parameter for method {descriptorMethod.Name} on {descriptor.Name}");

        if (parameters.Length > 1)
            throw new Exception($"More than one parameter for method {descriptorMethod.Name} on {descriptor.Name}");

        if (parameters[0].ParameterType != typeof(bool?))
            breakingDescriptors.Add($"{descriptor.FullName} method {descriptorMethod.Name} does not take nullable bool");

        if (!parameters[0].HasDefaultValue)
            breakingDescriptors.Add($"{descriptor.FullName} method {descriptorMethod.Name} does not have a default value");
    }
}

breakingDescriptors.Should().BeEmpty();
----

