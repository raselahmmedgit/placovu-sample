:ref_current: https://www.elastic.co/guide/en/elasticsearch/reference/master

:github: https://github.com/elastic/elasticsearch-net

:nuget: https://www.nuget.org/packages

////
IMPORTANT NOTE
==============
This file has been generated from https://github.com/elastic/elasticsearch-net/tree/master/src/Tests/CommonOptions/DateMath/DateMathExpressions.doc.cs. 
If you wish to submit a PR for any spelling mistakes, typos or grammatical errors for this file,
please modify the original csharp file found at the link and submit the PR with that change. Thanks!
////

[[date-math-expressions]]
=== Date math expressions

The date type supports using date math expression when using it in a query/filter
Whenever durations need to be specified, eg for a timeout parameter, the duration can be specified

The expression starts with an "anchor" date, which can be either now or a date string (in the applicable format) ending with `||`.
It can then follow by a math expression, supporting `+`, `-` and `/` (rounding).
The units supported are

* `y` (year)

* `M` (month)

* `w` (week)

* `d` (day)

* `h` (hour)

* `m` (minute)

* `s` (second)

as a whole number representing time in milliseconds, or as a time value like `2d` for 2 days.

:datemath: {ref_current}/common-options.html#date-math

Be sure to read the Elasticsearch documentation on {datemath}[Date Math].

==== Simple expressions

You can create simple expressions using any of the static methods on `DateMath`

[source,csharp]
----
Expect("now").WhenSerializing(Nest.DateMath.Now);
Expect("2015-05-05T00:00:00").WhenSerializing(Nest.DateMath.Anchored(new DateTime(2015,05, 05)));
----

strings implicitly convert to `DateMath` 

[source,csharp]
----
Expect("now").WhenSerializing<Nest.DateMath>("now");
----

but are lenient to bad math expressions 

[source,csharp]
----
var nonsense = "now||*asdaqwe";
----

the resulting date math will assume the whole string is the anchor 

[source,csharp]
----
Expect(nonsense).WhenSerializing<Nest.DateMath>(nonsense)
    .Result(dateMath => ((IDateMath)dateMath)
        .Anchor.Match(
            d => d.Should().NotBe(default(DateTime)),
            s => s.Should().Be(nonsense)
        )
    );
----

`DateTime` also implicitly convert to simple date math expressions; the resulting
anchor will be an actual `DateTime`, even after a serialization/deserialization round trip

[source,csharp]
----
var date = new DateTime(2015, 05, 05);
Expect("2015-05-05T00:00:00").WhenSerializing<Nest.DateMath>(date)
    .Result(dateMath => ((IDateMath)dateMath)
        .Anchor.Match(
            d => d.Should().Be(date),
            s => s.Should().BeNull()
        )
    );
----

==== Complex expressions

Ranges can be chained on to simple expressions

[source,csharp]
----
Expect("now+1d").WhenSerializing(
    Nest.DateMath.Now.Add("1d"));
----

Including multiple operations 

[source,csharp]
----
Expect("now+1d-1m").WhenSerializing(
    Nest.DateMath.Now.Add("1d").Subtract(TimeSpan.FromMinutes(1)));
----

A rounding value can be chained to the end of the expression, after which no more ranges can be appended 

[source,csharp]
----
Expect("now+1d-1m/d").WhenSerializing(
    Nest.DateMath.Now.Add("1d")
        .Subtract(TimeSpan.FromMinutes(1))
        .RoundTo(Nest.TimeUnit.Day));
----

When anchoring dates, a `||` needs to be appended as clear separator between the anchor and ranges.
Again, multiple ranges can be chained

[source,csharp]
----
Expect("2015-05-05T00:00:00||+1d-1m").WhenSerializing(
    Nest.DateMath.Anchored(new DateTime(2015,05,05))
        .Add("1d")
        .Subtract(TimeSpan.FromMinutes(1)));
----

==== Fractional times

DateMath expressions do not support fractional numbers so unlike `Time` DateMath will
pick the biggest integer unit it can represent

[source,csharp]
----
Expect("now+25h").WhenSerializing(
    Nest.DateMath.Now.Add(TimeSpan.FromHours(25)));
----

where as `Time` on its own serializes like this 

[source,csharp]
----
Expect("1.04d").WhenSerializing(new Time(TimeSpan.FromHours(25)));

Expect("now+90001s").WhenSerializing(
    Nest.DateMath.Now.Add(TimeSpan.FromHours(25).Add(TimeSpan.FromSeconds(1))));

Expect("now+90000001ms").WhenSerializing(
    Nest.DateMath.Now.Add(TimeSpan.FromHours(25).Add(TimeSpan.FromMilliseconds(1))));

Expect("now+1y").WhenSerializing(
    Nest.DateMath.Now.Add("1y"));

Expect("now+52w").WhenSerializing(
    Nest.DateMath.Now.Add(TimeSpan.FromDays(7 * 52)));
----

