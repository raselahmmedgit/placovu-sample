using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Elasticsearch.Net;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/v6.0.0-alpha1/rest-api-spec
//Generated from commit v6.0.0-alpha1

namespace Elasticsearch.Net
{
	///<summary>
	///Raw operations with elasticsearch
	///<pre>
	///This file is automatically generated from https://github.com/elastic/elasticsearch/tree/v6.0.0-alpha1/rest-api-spec
	///</pre>
	///<pre>
	///Generated of commit v6.0.0-alpha1
	///</pre>
	///</summary>
	public partial interface IElasticLowLevelClient
	{
		//IConnection Connection { get; }
		//IConnectionConfigurationValues Settings { get; }
		//IElasticsearchSerializer Serializer { get; }

		///<summary>Represents a POST on /_bulk
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Bulk<T>(PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_bulk
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> BulkAsync<T>(PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_bulk
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Bulk<T>(string index, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_bulk
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> BulkAsync<T>(string index, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_bulk
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Bulk<T>(string index, string type, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_bulk
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> BulkAsync<T>(string index, string type, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_bulk
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> BulkPut<T>(PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_bulk
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> BulkPutAsync<T>(PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/_bulk
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> BulkPut<T>(string index, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/_bulk
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> BulkPutAsync<T>(string index, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/_bulk
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> BulkPut<T>(string index, string type, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/_bulk
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-bulk.html </para>
		///</summary>
		///<param name="index">Default index for items which don&#39;t provide one</param>
		///<param name="type">Default document type for items which don&#39;t provide one</param>
		///<param name="body">The operation definition and data (action-data pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> BulkPutAsync<T>(string index, string type, PostData<object> body, Func<BulkRequestParameters, BulkRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/aliases
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatAliases<T>(Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/aliases
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatAliasesAsync<T>(Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/aliases/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html </para>
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatAliases<T>(string name, Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/aliases/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-alias.html </para>
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatAliasesAsync<T>(string name, Func<CatAliasesRequestParameters, CatAliasesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/allocation
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatAllocation<T>(Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/allocation
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatAllocationAsync<T>(Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/allocation/{node_id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatAllocation<T>(string node_id, Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/allocation/{node_id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-allocation.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatAllocationAsync<T>(string node_id, Func<CatAllocationRequestParameters, CatAllocationRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatCount<T>(Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatCountAsync<T>(Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/count/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatCount<T>(string index, Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/count/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatCountAsync<T>(string index, Func<CatCountRequestParameters, CatCountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/fielddata
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatFielddata<T>(Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/fielddata
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatFielddataAsync<T>(Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/fielddata/{fields}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html </para>
		///</summary>
		///<param name="fields">A comma-separated list of fields to return the fielddata size</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatFielddata<T>(string fields, Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/fielddata/{fields}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-fielddata.html </para>
		///</summary>
		///<param name="fields">A comma-separated list of fields to return the fielddata size</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatFielddataAsync<T>(string fields, Func<CatFielddataRequestParameters, CatFielddataRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/health
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatHealth<T>(Func<CatHealthRequestParameters, CatHealthRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/health
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-health.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatHealthAsync<T>(Func<CatHealthRequestParameters, CatHealthRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatHelp<T>(Func<CatHelpRequestParameters, CatHelpRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatHelpAsync<T>(Func<CatHelpRequestParameters, CatHelpRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/indices
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatIndices<T>(Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/indices
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatIndicesAsync<T>(Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/indices/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatIndices<T>(string index, Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/indices/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-indices.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatIndicesAsync<T>(string index, Func<CatIndicesRequestParameters, CatIndicesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/master
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatMaster<T>(Func<CatMasterRequestParameters, CatMasterRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/master
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-master.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatMasterAsync<T>(Func<CatMasterRequestParameters, CatMasterRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/nodeattrs
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatNodeattrs<T>(Func<CatNodeAttributesRequestParameters, CatNodeAttributesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/nodeattrs
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodeattrs.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatNodeattrsAsync<T>(Func<CatNodeAttributesRequestParameters, CatNodeAttributesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/nodes
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatNodes<T>(Func<CatNodesRequestParameters, CatNodesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/nodes
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-nodes.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatNodesAsync<T>(Func<CatNodesRequestParameters, CatNodesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/pending_tasks
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatPendingTasks<T>(Func<CatPendingTasksRequestParameters, CatPendingTasksRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/pending_tasks
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-pending-tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatPendingTasksAsync<T>(Func<CatPendingTasksRequestParameters, CatPendingTasksRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/plugins
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatPlugins<T>(Func<CatPluginsRequestParameters, CatPluginsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/plugins
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-plugins.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatPluginsAsync<T>(Func<CatPluginsRequestParameters, CatPluginsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/recovery
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatRecovery<T>(Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/recovery
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatRecoveryAsync<T>(Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/recovery/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatRecovery<T>(string index, Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/recovery/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-recovery.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatRecoveryAsync<T>(string index, Func<CatRecoveryRequestParameters, CatRecoveryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/repositories
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatRepositories<T>(Func<CatRepositoriesRequestParameters, CatRepositoriesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/repositories
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-repositories.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatRepositoriesAsync<T>(Func<CatRepositoriesRequestParameters, CatRepositoriesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/segments
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatSegments<T>(Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/segments
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatSegmentsAsync<T>(Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/segments/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatSegments<T>(string index, Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/segments/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-segments.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatSegmentsAsync<T>(string index, Func<CatSegmentsRequestParameters, CatSegmentsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/shards
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatShards<T>(Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/shards
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatShardsAsync<T>(Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/shards/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatShards<T>(string index, Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/shards/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-shards.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to limit the returned information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatShardsAsync<T>(string index, Func<CatShardsRequestParameters, CatShardsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/snapshots
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatSnapshots<T>(Func<CatSnapshotsRequestParameters, CatSnapshotsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/snapshots
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatSnapshotsAsync<T>(Func<CatSnapshotsRequestParameters, CatSnapshotsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/snapshots/{repository}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html </para>
		///</summary>
		///<param name="repository">Name of repository from which to fetch the snapshot information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatSnapshots<T>(string repository, Func<CatSnapshotsRequestParameters, CatSnapshotsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/snapshots/{repository}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-snapshots.html </para>
		///</summary>
		///<param name="repository">Name of repository from which to fetch the snapshot information</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatSnapshotsAsync<T>(string repository, Func<CatSnapshotsRequestParameters, CatSnapshotsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/tasks
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatTasks<T>(Func<CatTasksRequestParameters, CatTasksRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/tasks
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatTasksAsync<T>(Func<CatTasksRequestParameters, CatTasksRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/templates
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatTemplates<T>(Func<CatTemplatesRequestParameters, CatTemplatesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/templates
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatTemplatesAsync<T>(Func<CatTemplatesRequestParameters, CatTemplatesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/templates/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html </para>
		///</summary>
		///<param name="name">A pattern that returned template names must match</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatTemplates<T>(string name, Func<CatTemplatesRequestParameters, CatTemplatesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/templates/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-templates.html </para>
		///</summary>
		///<param name="name">A pattern that returned template names must match</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatTemplatesAsync<T>(string name, Func<CatTemplatesRequestParameters, CatTemplatesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/thread_pool
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatThreadPool<T>(Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/thread_pool
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatThreadPoolAsync<T>(Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cat/thread_pool/{thread_pool_patterns}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html </para>
		///</summary>
		///<param name="thread_pool_patterns">A comma-separated list of regular-expressions to filter the thread pools in the output</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CatThreadPool<T>(string thread_pool_patterns, Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cat/thread_pool/{thread_pool_patterns}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cat-thread-pool.html </para>
		///</summary>
		///<param name="thread_pool_patterns">A comma-separated list of regular-expressions to filter the thread pools in the output</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CatThreadPoolAsync<T>(string thread_pool_patterns, Func<CatThreadPoolRequestParameters, CatThreadPoolRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_search/scroll
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html </para>
		///</summary>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClearScroll<T>(PostData<object> body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_search/scroll
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html </para>
		///</summary>
		///<param name="body">A comma-separated list of scroll IDs to clear if none was specified via the scroll_id parameter</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClearScrollAsync<T>(PostData<object> body, Func<ClearScrollRequestParameters, ClearScrollRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/allocation/explain
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterAllocationExplainGet<T>(Func<ClusterAllocationExplainRequestParameters, ClusterAllocationExplainRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/allocation/explain
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterAllocationExplainGetAsync<T>(Func<ClusterAllocationExplainRequestParameters, ClusterAllocationExplainRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_cluster/allocation/explain
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html </para>
		///</summary>
		///<param name="body">The index, shard, and primary flag to explain. Empty means &#39;explain the first unassigned shard&#39;</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterAllocationExplain<T>(PostData<object> body, Func<ClusterAllocationExplainRequestParameters, ClusterAllocationExplainRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_cluster/allocation/explain
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-allocation-explain.html </para>
		///</summary>
		///<param name="body">The index, shard, and primary flag to explain. Empty means &#39;explain the first unassigned shard&#39;</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterAllocationExplainAsync<T>(PostData<object> body, Func<ClusterAllocationExplainRequestParameters, ClusterAllocationExplainRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/settings
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterGetSettings<T>(Func<ClusterGetSettingsRequestParameters, ClusterGetSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/settings
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterGetSettingsAsync<T>(Func<ClusterGetSettingsRequestParameters, ClusterGetSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/health
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterHealth<T>(Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/health
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterHealthAsync<T>(Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/health/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html </para>
		///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterHealth<T>(string index, Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/health/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-health.html </para>
		///</summary>
		///<param name="index">Limit the information returned to a specific index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterHealthAsync<T>(string index, Func<ClusterHealthRequestParameters, ClusterHealthRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/pending_tasks
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterPendingTasks<T>(Func<ClusterPendingTasksRequestParameters, ClusterPendingTasksRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/pending_tasks
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-pending.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterPendingTasksAsync<T>(Func<ClusterPendingTasksRequestParameters, ClusterPendingTasksRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_cluster/settings
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html </para>
		///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterPutSettings<T>(PostData<object> body, Func<ClusterPutSettingsRequestParameters, ClusterPutSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_cluster/settings
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-update-settings.html </para>
		///</summary>
		///<param name="body">The settings to be updated. Can be either `transient` or `persistent` (survives cluster restart).</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterPutSettingsAsync<T>(PostData<object> body, Func<ClusterPutSettingsRequestParameters, ClusterPutSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_cluster/reroute
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html </para>
		///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterReroute<T>(PostData<object> body, Func<ClusterRerouteRequestParameters, ClusterRerouteRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_cluster/reroute
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-reroute.html </para>
		///</summary>
		///<param name="body">The definition of `commands` to perform (`move`, `cancel`, `allocate`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterRerouteAsync<T>(PostData<object> body, Func<ClusterRerouteRequestParameters, ClusterRerouteRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/state
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterState<T>(Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/state
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterStateAsync<T>(Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/state/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterState<T>(string metric, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/state/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterStateAsync<T>(string metric, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/state/{metric}/{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterState<T>(string metric, string index, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/state/{metric}/{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-state.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterStateAsync<T>(string metric, string index, Func<ClusterStateRequestParameters, ClusterStateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterStats<T>(Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterStatsAsync<T>(Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/stats/nodes/{node_id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ClusterStats<T>(string node_id, Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/stats/nodes/{node_id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ClusterStatsAsync<T>(string node_id, Func<ClusterStatsRequestParameters, ClusterStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Count<T>(PostData<object> body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CountAsync<T>(PostData<object> body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Count<T>(string index, PostData<object> body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CountAsync<T>(string index, PostData<object> body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Count<T>(string index, string type, PostData<object> body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="body">A query to restrict the results specified with the Query DSL (optional)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CountAsync<T>(string index, string type, PostData<object> body, Func<CountRequestParameters, CountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CountGet<T>(Func<CountRequestParameters, CountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CountGetAsync<T>(Func<CountRequestParameters, CountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CountGet<T>(string index, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CountGetAsync<T>(string index, Func<CountRequestParameters, CountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_count
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CountGet<T>(string index, string type, Func<CountRequestParameters, CountRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_count
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-count.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to restrict the results</param>
		///<param name="type">A comma-separated list of types to restrict the results</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CountGetAsync<T>(string index, string type, Func<CountRequestParameters, CountRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/{id}/_create
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Create<T>(string index, string type, string id, PostData<object> body, Func<CreateRequestParameters, CreateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/{id}/_create
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CreateAsync<T>(string index, string type, string id, PostData<object> body, Func<CreateRequestParameters, CreateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_create
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> CreatePost<T>(string index, string type, string id, PostData<object> body, Func<CreateRequestParameters, CreateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_create
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> CreatePostAsync<T>(string index, string type, string id, PostData<object> body, Func<CreateRequestParameters, CreateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /{index}/{type}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Delete<T>(string index, string type, string id, Func<DeleteRequestParameters, DeleteRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /{index}/{type}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> DeleteAsync<T>(string index, string type, string id, Func<DeleteRequestParameters, DeleteRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_delete_by_query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> DeleteByQuery<T>(string index, PostData<object> body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_delete_by_query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> DeleteByQueryAsync<T>(string index, PostData<object> body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_delete_by_query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> DeleteByQuery<T>(string index, string type, PostData<object> body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_delete_by_query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-delete-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> DeleteByQueryAsync<T>(string index, string type, PostData<object> body, Func<DeleteByQueryRequestParameters, DeleteByQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_scripts/{lang}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> DeleteScript<T>(string lang, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_scripts/{lang}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> DeleteScriptAsync<T>(string lang, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_scripts/{lang}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> DeleteScript<T>(string lang, string id, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_scripts/{lang}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> DeleteScriptAsync<T>(string lang, string id, Func<DeleteScriptRequestParameters, DeleteScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_search/template/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> DeleteTemplate<T>(string id, Func<DeleteSearchTemplateRequestParameters, DeleteSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_search/template/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> DeleteTemplateAsync<T>(string id, Func<DeleteSearchTemplateRequestParameters, DeleteSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /{index}/{type}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Exists<T>(string index, string type, string id, Func<DocumentExistsRequestParameters, DocumentExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /{index}/{type}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ExistsAsync<T>(string index, string type, string id, Func<DocumentExistsRequestParameters, DocumentExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /{index}/{type}/{id}/_source
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ExistsSource<T>(string index, string type, string id, Func<SourceExistsRequestParameters, SourceExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /{index}/{type}/{id}/_source
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ExistsSourceAsync<T>(string index, string type, string id, Func<SourceExistsRequestParameters, SourceExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_explain
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ExplainGet<T>(string index, string type, string id, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_explain
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ExplainGetAsync<T>(string index, string type, string id, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_explain
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Explain<T>(string index, string type, string id, PostData<object> body, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_explain
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-explain.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">The document ID</param>
		///<param name="body">The query definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ExplainAsync<T>(string index, string type, string id, PostData<object> body, Func<ExplainRequestParameters, ExplainRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_field_caps
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldCapsGet<T>(Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_field_caps
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldCapsGetAsync<T>(Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_field_caps
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldCapsGet<T>(string index, Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_field_caps
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldCapsGetAsync<T>(string index, Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_field_caps
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="body">Field json objects containing an array of field names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldCaps<T>(PostData<object> body, Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_field_caps
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="body">Field json objects containing an array of field names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldCapsAsync<T>(PostData<object> body, Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_field_caps
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">Field json objects containing an array of field names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldCaps<T>(string index, PostData<object> body, Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_field_caps
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/search-field-caps.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">Field json objects containing an array of field names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldCapsAsync<T>(string index, PostData<object> body, Func<FieldCapabilitiesRequestParameters, FieldCapabilitiesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_field_stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldStatsGet<T>(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_field_stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldStatsGetAsync<T>(Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_field_stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldStatsGet<T>(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_field_stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldStatsGetAsync<T>(string index, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_field_stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="body">Field json objects containing the name and optionally a range to filter out indices result, that have results outside the defined bounds</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldStats<T>(PostData<object> body, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_field_stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="body">Field json objects containing the name and optionally a range to filter out indices result, that have results outside the defined bounds</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldStatsAsync<T>(PostData<object> body, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_field_stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">Field json objects containing the name and optionally a range to filter out indices result, that have results outside the defined bounds</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> FieldStats<T>(string index, PostData<object> body, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_field_stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-field-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">Field json objects containing the name and optionally a range to filter out indices result, that have results outside the defined bounds</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> FieldStatsAsync<T>(string index, PostData<object> body, Func<FieldStatsRequestParameters, FieldStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Get<T>(string index, string type, string id, Func<GetRequestParameters, GetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document (use `_all` to fetch the first document matching the ID across all types)</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> GetAsync<T>(string index, string type, string id, Func<GetRequestParameters, GetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_scripts/{lang}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> GetScript<T>(string lang, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_scripts/{lang}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> GetScriptAsync<T>(string lang, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_scripts/{lang}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> GetScript<T>(string lang, string id, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_scripts/{lang}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> GetScriptAsync<T>(string lang, string id, Func<GetScriptRequestParameters, GetScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_source
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> GetSource<T>(string index, string type, string id, Func<SourceRequestParameters, SourceRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_source
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document; use `_all` to fetch the first document matching the ID across all types</param>
		///<param name="id">The document ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> GetSourceAsync<T>(string index, string type, string id, Func<SourceRequestParameters, SourceRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_search/template/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> GetTemplate<T>(string id, Func<GetSearchTemplateRequestParameters, GetSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_search/template/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> GetTemplateAsync<T>(string id, Func<GetSearchTemplateRequestParameters, GetSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Index<T>(string index, string type, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndexAsync<T>(string index, string type, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Index<T>(string index, string type, string id, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndexAsync<T>(string index, string type, string id, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndexPut<T>(string index, string type, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndexPutAsync<T>(string index, string type, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndexPut<T>(string index, string type, string id, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-index_.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndexPutAsync<T>(string index, string type, string id, PostData<object> body, Func<IndexRequestParameters, IndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_analyze
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesAnalyzeGetForAll<T>(Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_analyze
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesAnalyzeGetForAllAsync<T>(Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_analyze
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesAnalyzeGet<T>(string index, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_analyze
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesAnalyzeGetAsync<T>(string index, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_analyze
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesAnalyzeForAll<T>(PostData<object> body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_analyze
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesAnalyzeForAllAsync<T>(PostData<object> body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_analyze
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesAnalyze<T>(string index, PostData<object> body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_analyze
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-analyze.html </para>
		///</summary>
		///<param name="index">The name of the index to scope the operation</param>
		///<param name="body">Define analyzer/tokenizer parameters and the text on which the analysis should be performed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesAnalyzeAsync<T>(string index, PostData<object> body, Func<AnalyzeRequestParameters, AnalyzeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_cache/clear
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesClearCacheForAll<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_cache/clear
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesClearCacheForAllAsync<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_cache/clear
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesClearCache<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_cache/clear
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesClearCacheAsync<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cache/clear
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesClearCacheGetForAll<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cache/clear
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesClearCacheGetForAllAsync<T>(Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_cache/clear
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesClearCacheGet<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_cache/clear
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-clearcache.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index name to limit the operation</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesClearCacheGetAsync<T>(string index, Func<ClearCacheRequestParameters, ClearCacheRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_close
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html </para>
		///</summary>
		///<param name="index">A comma separated list of indices to close</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesClose<T>(string index, Func<CloseIndexRequestParameters, CloseIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_close
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html </para>
		///</summary>
		///<param name="index">A comma separated list of indices to close</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesCloseAsync<T>(string index, Func<CloseIndexRequestParameters, CloseIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesCreate<T>(string index, PostData<object> body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-create-index.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">The configuration for the index (`settings` and `mappings`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesCreateAsync<T>(string index, PostData<object> body, Func<CreateIndexRequestParameters, CreateIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesDelete<T>(string index, Func<DeleteIndexRequestParameters, DeleteIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-delete-index.html </para>
		///</summary>
		///<param name="index">A comma-separated list of indices to delete; use `_all` or `*` string to delete all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesDeleteAsync<T>(string index, Func<DeleteIndexRequestParameters, DeleteIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /{index}/_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesDeleteAlias<T>(string index, string name, Func<DeleteAliasRequestParameters, DeleteAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /{index}/_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names (supports wildcards); use `_all` for all indices</param>
		///<param name="name">A comma-separated list of aliases to delete (supports wildcards); use `_all` to delete all aliases for the specified indices.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesDeleteAliasAsync<T>(string index, string name, Func<DeleteAliasRequestParameters, DeleteAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_template/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesDeleteTemplateForAll<T>(string name, Func<DeleteIndexTemplateRequestParameters, DeleteIndexTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_template/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesDeleteTemplateForAllAsync<T>(string name, Func<DeleteIndexTemplateRequestParameters, DeleteIndexTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesExists<T>(string index, Func<IndexExistsRequestParameters, IndexExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-exists.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesExistsAsync<T>(string index, Func<IndexExistsRequestParameters, IndexExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesExistsAliasForAll<T>(string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesExistsAliasForAllAsync<T>(string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /{index}/_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesExistsAlias<T>(string index, string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /{index}/_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesExistsAliasAsync<T>(string index, string name, Func<AliasExistsRequestParameters, AliasExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /_template/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The comma separated names of the index templates</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesExistsTemplateForAll<T>(string name, Func<IndexTemplateExistsRequestParameters, IndexTemplateExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /_template/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The comma separated names of the index templates</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesExistsTemplateForAllAsync<T>(string name, Func<IndexTemplateExistsRequestParameters, IndexTemplateExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /{index}/_mapping/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesExistsType<T>(string index, string type, Func<TypeExistsRequestParameters, TypeExistsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /{index}/_mapping/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-types-exists.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use `_all` to check the types across all indices</param>
		///<param name="type">A comma-separated list of document types to check</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesExistsTypeAsync<T>(string index, string type, Func<TypeExistsRequestParameters, TypeExistsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_flush
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushForAll<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_flush
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushForAllAsync<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_flush
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlush<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_flush
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushAsync<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_flush
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushGetForAll<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_flush
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushGetForAllAsync<T>(Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_flush
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushGet<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_flush
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushGetAsync<T>(string index, Func<FlushRequestParameters, FlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_flush/synced
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushSyncedForAll<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_flush/synced
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushSyncedForAllAsync<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_flush/synced
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushSynced<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_flush/synced
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushSyncedAsync<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_flush/synced
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushSyncedGetForAll<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_flush/synced
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushSyncedGetForAllAsync<T>(Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_flush/synced
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesFlushSyncedGet<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_flush/synced
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-synced-flush.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All for all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesFlushSyncedGetAsync<T>(string index, Func<SyncedFlushRequestParameters, SyncedFlushRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_forcemerge
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesForcemergeForAll<T>(Func<ForceMergeRequestParameters, ForceMergeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_forcemerge
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesForcemergeForAllAsync<T>(Func<ForceMergeRequestParameters, ForceMergeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_forcemerge
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesForcemerge<T>(string index, Func<ForceMergeRequestParameters, ForceMergeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_forcemerge
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-forcemerge.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesForcemergeAsync<T>(string index, Func<ForceMergeRequestParameters, ForceMergeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGet<T>(string index, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetAsync<T>(string index, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{feature}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="feature">A comma-separated list of features</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGet<T>(string index, string feature, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{feature}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-index.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="feature">A comma-separated list of features</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetAsync<T>(string index, string feature, Func<GetIndexRequestParameters, GetIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_alias
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetAliasForAll<T>(Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_alias
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetAliasForAllAsync<T>(Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetAliasForAll<T>(string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetAliasForAllAsync<T>(string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetAlias<T>(string index, string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="name">A comma-separated list of alias names to return</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetAliasAsync<T>(string index, string name, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_alias
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetAlias<T>(string index, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_alias
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to filter aliases</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetAliasAsync<T>(string index, Func<GetAliasRequestParameters, GetAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_mapping/field/{fields}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetFieldMappingForAll<T>(string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_mapping/field/{fields}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetFieldMappingForAllAsync<T>(string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping/field/{fields}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetFieldMapping<T>(string index, string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping/field/{fields}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetFieldMappingAsync<T>(string index, string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_mapping/{type}/field/{fields}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetFieldMappingForAll<T>(string type, string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_mapping/{type}/field/{fields}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetFieldMappingForAllAsync<T>(string type, string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping/{type}/field/{fields}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetFieldMapping<T>(string index, string type, string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping/{type}/field/{fields}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-field-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="fields">A comma-separated list of fields</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetFieldMappingAsync<T>(string index, string type, string fields, Func<GetFieldMappingRequestParameters, GetFieldMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_mapping
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetMappingForAll<T>(Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_mapping
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetMappingForAllAsync<T>(Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetMapping<T>(string index, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetMappingAsync<T>(string index, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_mapping/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetMappingForAll<T>(string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_mapping/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetMappingForAllAsync<T>(string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetMapping<T>(string index, string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_mapping/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names</param>
		///<param name="type">A comma-separated list of document types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetMappingAsync<T>(string index, string type, Func<GetMappingRequestParameters, GetMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_settings
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetSettingsForAll<T>(Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_settings
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetSettingsForAllAsync<T>(Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_settings
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetSettings<T>(string index, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_settings
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetSettingsAsync<T>(string index, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_settings/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetSettings<T>(string index, string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_settings/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetSettingsAsync<T>(string index, string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_settings/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetSettingsForAll<T>(string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_settings/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-get-settings.html </para>
		///</summary>
		///<param name="name">The name of the settings that should be included</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetSettingsForAllAsync<T>(string name, Func<GetIndexSettingsRequestParameters, GetIndexSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetTemplateForAll<T>(Func<GetIndexTemplateRequestParameters, GetIndexTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetTemplateForAllAsync<T>(Func<GetIndexTemplateRequestParameters, GetIndexTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_template/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The comma separated names of the index templates</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetTemplateForAll<T>(string name, Func<GetIndexTemplateRequestParameters, GetIndexTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_template/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The comma separated names of the index templates</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetTemplateForAllAsync<T>(string name, Func<GetIndexTemplateRequestParameters, GetIndexTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_upgrade
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetUpgradeForAll<T>(Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_upgrade
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetUpgradeForAllAsync<T>(Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_upgrade
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesGetUpgrade<T>(string index, Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_upgrade
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesGetUpgradeAsync<T>(string index, Func<UpgradeStatusRequestParameters, UpgradeStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_open
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html </para>
		///</summary>
		///<param name="index">A comma separated list of indices to open</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesOpen<T>(string index, Func<OpenIndexRequestParameters, OpenIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_open
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-open-close.html </para>
		///</summary>
		///<param name="index">A comma separated list of indices to open</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesOpenAsync<T>(string index, Func<OpenIndexRequestParameters, OpenIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutAlias<T>(string index, string name, PostData<object> body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutAliasAsync<T>(string index, string name, PostData<object> body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_alias/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutAliasPost<T>(string index, string name, PostData<object> body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_alias/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the alias should point to (supports wildcards); use `_all` to perform the operation on all indices.</param>
		///<param name="name">The name of the alias to be created or updated</param>
		///<param name="body">The settings for the alias, such as `routing` or `filter`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutAliasPostAsync<T>(string index, string name, PostData<object> body, Func<PutAliasRequestParameters, PutAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/_mapping
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutMapping<T>(string index, string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/{type}/_mapping
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutMappingAsync<T>(string index, string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_mapping/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutMappingForAll<T>(string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_mapping/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutMappingForAllAsync<T>(string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_mapping
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutMappingPost<T>(string index, string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_mapping
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names the mapping should be added to (supports wildcards); use `_all` or omit to add the mapping on all indices.</param>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutMappingPostAsync<T>(string index, string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_mapping/{type}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutMappingPostForAll<T>(string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_mapping/{type}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-put-mapping.html </para>
		///</summary>
		///<param name="type">The name of the document type</param>
		///<param name="body">The mapping definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutMappingPostForAllAsync<T>(string type, PostData<object> body, Func<PutMappingRequestParameters, PutMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_settings
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html </para>
		///</summary>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutSettingsForAll<T>(PostData<object> body, Func<UpdateIndexSettingsRequestParameters, UpdateIndexSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_settings
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html </para>
		///</summary>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutSettingsForAllAsync<T>(PostData<object> body, Func<UpdateIndexSettingsRequestParameters, UpdateIndexSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/_settings
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutSettings<T>(string index, PostData<object> body, Func<UpdateIndexSettingsRequestParameters, UpdateIndexSettingsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/_settings
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-update-settings.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The index settings to be updated</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutSettingsAsync<T>(string index, PostData<object> body, Func<UpdateIndexSettingsRequestParameters, UpdateIndexSettingsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_template/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutTemplateForAll<T>(string name, PostData<object> body, Func<PutIndexTemplateRequestParameters, PutIndexTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_template/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutTemplateForAllAsync<T>(string name, PostData<object> body, Func<PutIndexTemplateRequestParameters, PutIndexTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_template/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesPutTemplatePostForAll<T>(string name, PostData<object> body, Func<PutIndexTemplateRequestParameters, PutIndexTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_template/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-templates.html </para>
		///</summary>
		///<param name="name">The name of the template</param>
		///<param name="body">The template definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesPutTemplatePostForAllAsync<T>(string name, PostData<object> body, Func<PutIndexTemplateRequestParameters, PutIndexTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_recovery
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRecoveryForAll<T>(Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_recovery
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRecoveryForAllAsync<T>(Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_recovery
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRecovery<T>(string index, Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_recovery
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-recovery.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRecoveryAsync<T>(string index, Func<RecoveryStatusRequestParameters, RecoveryStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_refresh
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRefreshForAll<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_refresh
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRefreshForAllAsync<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_refresh
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRefresh<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_refresh
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRefreshAsync<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_refresh
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRefreshGetForAll<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_refresh
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRefreshGetForAllAsync<T>(Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_refresh
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRefreshGet<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_refresh
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-refresh.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRefreshGetAsync<T>(string index, Func<RefreshRequestParameters, RefreshRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{alias}/_rollover
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html </para>
		///</summary>
		///<param name="alias">The name of the alias to rollover</param>
		///<param name="body">The conditions that needs to be met for executing rollover</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRolloverForAll<T>(string alias, PostData<object> body, Func<RolloverIndexRequestParameters, RolloverIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{alias}/_rollover
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html </para>
		///</summary>
		///<param name="alias">The name of the alias to rollover</param>
		///<param name="body">The conditions that needs to be met for executing rollover</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRolloverForAllAsync<T>(string alias, PostData<object> body, Func<RolloverIndexRequestParameters, RolloverIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{alias}/_rollover/{new_index}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html </para>
		///</summary>
		///<param name="alias">The name of the alias to rollover</param>
		///<param name="new_index">The name of the rollover index</param>
		///<param name="body">The conditions that needs to be met for executing rollover</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesRolloverForAll<T>(string alias, string new_index, PostData<object> body, Func<RolloverIndexRequestParameters, RolloverIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{alias}/_rollover/{new_index}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-rollover-index.html </para>
		///</summary>
		///<param name="alias">The name of the alias to rollover</param>
		///<param name="new_index">The name of the rollover index</param>
		///<param name="body">The conditions that needs to be met for executing rollover</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesRolloverForAllAsync<T>(string alias, string new_index, PostData<object> body, Func<RolloverIndexRequestParameters, RolloverIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_segments
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesSegmentsForAll<T>(Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_segments
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesSegmentsForAllAsync<T>(Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_segments
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesSegments<T>(string index, Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_segments
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-segments.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesSegmentsAsync<T>(string index, Func<SegmentsRequestParameters, SegmentsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_shard_stores
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesShardStoresForAll<T>(Func<IndicesShardStoresRequestParameters, IndicesShardStoresRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_shard_stores
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesShardStoresForAllAsync<T>(Func<IndicesShardStoresRequestParameters, IndicesShardStoresRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_shard_stores
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesShardStores<T>(string index, Func<IndicesShardStoresRequestParameters, IndicesShardStoresRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_shard_stores
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shards-stores.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesShardStoresAsync<T>(string index, Func<IndicesShardStoresRequestParameters, IndicesShardStoresRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /{index}/_shrink/{target}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html </para>
		///</summary>
		///<param name="index">The name of the source index to shrink</param>
		///<param name="target">The name of the target index to shrink into</param>
		///<param name="body">The configuration for the target index (`settings` and `aliases`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesShrink<T>(string index, string target, PostData<object> body, Func<ShrinkIndexRequestParameters, ShrinkIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /{index}/_shrink/{target}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html </para>
		///</summary>
		///<param name="index">The name of the source index to shrink</param>
		///<param name="target">The name of the target index to shrink into</param>
		///<param name="body">The configuration for the target index (`settings` and `aliases`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesShrinkAsync<T>(string index, string target, PostData<object> body, Func<ShrinkIndexRequestParameters, ShrinkIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_shrink/{target}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html </para>
		///</summary>
		///<param name="index">The name of the source index to shrink</param>
		///<param name="target">The name of the target index to shrink into</param>
		///<param name="body">The configuration for the target index (`settings` and `aliases`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesShrinkPost<T>(string index, string target, PostData<object> body, Func<ShrinkIndexRequestParameters, ShrinkIndexRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_shrink/{target}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-shrink-index.html </para>
		///</summary>
		///<param name="index">The name of the source index to shrink</param>
		///<param name="target">The name of the target index to shrink into</param>
		///<param name="body">The configuration for the target index (`settings` and `aliases`)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesShrinkPostAsync<T>(string index, string target, PostData<object> body, Func<ShrinkIndexRequestParameters, ShrinkIndexRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesStatsForAll<T>(Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesStatsForAllAsync<T>(Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_stats/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesStatsForAll<T>(string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_stats/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesStatsForAllAsync<T>(string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesStats<T>(string index, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesStatsAsync<T>(string index, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_stats/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesStats<T>(string index, string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_stats/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-stats.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="metric">Limit the information returned the specific metrics.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesStatsAsync<T>(string index, string metric, Func<IndicesStatsRequestParameters, IndicesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_aliases
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesUpdateAliasesForAll<T>(PostData<object> body, Func<BulkAliasRequestParameters, BulkAliasRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_aliases
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-aliases.html </para>
		///</summary>
		///<param name="body">The definition of `actions` to perform</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesUpdateAliasesForAllAsync<T>(PostData<object> body, Func<BulkAliasRequestParameters, BulkAliasRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_upgrade
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesUpgradeForAll<T>(Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_upgrade
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesUpgradeForAllAsync<T>(Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_upgrade
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesUpgrade<T>(string index, Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_upgrade
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/indices-upgrade.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesUpgradeAsync<T>(string index, Func<UpgradeRequestParameters, UpgradeRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_validate/query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesValidateQueryGetForAll<T>(Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_validate/query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesValidateQueryGetForAllAsync<T>(Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_validate/query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesValidateQueryGet<T>(string index, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_validate/query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesValidateQueryGetAsync<T>(string index, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_validate/query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesValidateQueryGet<T>(string index, string type, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_validate/query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesValidateQueryGetAsync<T>(string index, string type, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_validate/query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesValidateQueryForAll<T>(PostData<object> body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_validate/query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesValidateQueryForAllAsync<T>(PostData<object> body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_validate/query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesValidateQuery<T>(string index, PostData<object> body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_validate/query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesValidateQueryAsync<T>(string index, PostData<object> body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_validate/query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IndicesValidateQuery<T>(string index, string type, PostData<object> body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_validate/query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-validate.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to restrict the operation; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to restrict the operation; leave empty to perform the operation on all types</param>
		///<param name="body">The query definition specified with the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IndicesValidateQueryAsync<T>(string index, string type, PostData<object> body, Func<ValidateQueryRequestParameters, ValidateQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/ </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Info<T>(Func<RootNodeInfoRequestParameters, RootNodeInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/ </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> InfoAsync<T>(Func<RootNodeInfoRequestParameters, RootNodeInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_ingest/pipeline/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestDeletePipeline<T>(string id, Func<DeletePipelineRequestParameters, DeletePipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_ingest/pipeline/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestDeletePipelineAsync<T>(string id, Func<DeletePipelineRequestParameters, DeletePipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestGetPipeline<T>(Func<GetPipelineRequestParameters, GetPipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestGetPipelineAsync<T>(Func<GetPipelineRequestParameters, GetPipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Comma separated list of pipeline ids. Wildcards supported</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestGetPipeline<T>(string id, Func<GetPipelineRequestParameters, GetPipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Comma separated list of pipeline ids. Wildcards supported</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestGetPipelineAsync<T>(string id, Func<GetPipelineRequestParameters, GetPipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_ingest/pipeline/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="body">The ingest definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestPutPipeline<T>(string id, PostData<object> body, Func<PutPipelineRequestParameters, PutPipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_ingest/pipeline/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="body">The ingest definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestPutPipelineAsync<T>(string id, PostData<object> body, Func<PutPipelineRequestParameters, PutPipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline/_simulate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestSimulateGet<T>(Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline/_simulate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestSimulateGetAsync<T>(Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline/{id}/_simulate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestSimulateGet<T>(string id, Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_ingest/pipeline/{id}/_simulate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestSimulateGetAsync<T>(string id, Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_ingest/pipeline/_simulate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="body">The simulate definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestSimulate<T>(PostData<object> body, Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_ingest/pipeline/_simulate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="body">The simulate definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestSimulateAsync<T>(PostData<object> body, Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_ingest/pipeline/{id}/_simulate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="body">The simulate definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> IngestSimulate<T>(string id, PostData<object> body, Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_ingest/pipeline/{id}/_simulate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/plugins/master/ingest.html </para>
		///</summary>
		///<param name="id">Pipeline ID</param>
		///<param name="body">The simulate definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> IngestSimulateAsync<T>(string id, PostData<object> body, Func<SimulatePipelineRequestParameters, SimulatePipelineRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_mget
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MgetGet<T>(Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_mget
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MgetGetAsync<T>(Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_mget
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MgetGet<T>(string index, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_mget
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MgetGetAsync<T>(string index, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_mget
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MgetGet<T>(string index, string type, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_mget
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MgetGetAsync<T>(string index, string type, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_mget
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Mget<T>(PostData<object> body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_mget
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MgetAsync<T>(PostData<object> body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_mget
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Mget<T>(string index, PostData<object> body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_mget
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MgetAsync<T>(string index, PostData<object> body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_mget
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Mget<T>(string index, string type, PostData<object> body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_mget
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-get.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="body">Document identifiers; can be either `docs` (containing full document information) or `ids` (when index and type is provided in the URL.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MgetAsync<T>(string index, string type, PostData<object> body, Func<MultiGetRequestParameters, MultiGetRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_msearch
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchGet<T>(Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_msearch
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchGetAsync<T>(Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_msearch
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchGet<T>(string index, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_msearch
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchGetAsync<T>(string index, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_msearch
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchGet<T>(string index, string type, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_msearch
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchGetAsync<T>(string index, string type, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_msearch
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Msearch<T>(PostData<object> body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_msearch
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchAsync<T>(PostData<object> body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_msearch
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Msearch<T>(string index, PostData<object> body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_msearch
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchAsync<T>(string index, PostData<object> body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_msearch
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Msearch<T>(string index, string type, PostData<object> body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_msearch
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchAsync<T>(string index, string type, PostData<object> body, Func<MultiSearchRequestParameters, MultiSearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_msearch/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchTemplateGet<T>(Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_msearch/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchTemplateGetAsync<T>(Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_msearch/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchTemplateGet<T>(string index, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_msearch/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchTemplateGetAsync<T>(string index, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_msearch/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchTemplateGet<T>(string index, string type, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_msearch/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchTemplateGetAsync<T>(string index, string type, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_msearch/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchTemplate<T>(PostData<object> body, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_msearch/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchTemplateAsync<T>(PostData<object> body, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_msearch/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchTemplate<T>(string index, PostData<object> body, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_msearch/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchTemplateAsync<T>(string index, PostData<object> body, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_msearch/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MsearchTemplate<T>(string index, string type, PostData<object> body, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_msearch/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-multi-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to use as default</param>
		///<param name="type">A comma-separated list of document types to use as default</param>
		///<param name="body">The request definitions (metadata-search request definition pairs), separated by newlines</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MsearchTemplateAsync<T>(string index, string type, PostData<object> body, Func<MultiSearchTemplateRequestParameters, MultiSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_mtermvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MtermvectorsGet<T>(Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_mtermvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MtermvectorsGetAsync<T>(Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_mtermvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MtermvectorsGet<T>(string index, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_mtermvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MtermvectorsGetAsync<T>(string index, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_mtermvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> MtermvectorsGet<T>(string index, string type, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_mtermvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MtermvectorsGetAsync<T>(string index, string type, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_mtermvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Mtermvectors<T>(PostData<object> body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_mtermvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MtermvectorsAsync<T>(PostData<object> body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_mtermvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Mtermvectors<T>(string index, PostData<object> body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_mtermvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MtermvectorsAsync<T>(string index, PostData<object> body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_mtermvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Mtermvectors<T>(string index, string type, PostData<object> body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_mtermvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-multi-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define ids, documents, parameters or a list of parameters per document here. You must at least provide a list of document ids. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> MtermvectorsAsync<T>(string index, string type, PostData<object> body, Func<MultiTermVectorsRequestParameters, MultiTermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/nodes/hotthreads
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesHotThreadsForAll<T>(Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/nodes/hotthreads
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesHotThreadsForAllAsync<T>(Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesHotThreads<T>(string node_id, Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_cluster/nodes/{node_id}/hotthreads
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-hot-threads.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesHotThreadsAsync<T>(string node_id, Func<NodesHotThreadsRequestParameters, NodesHotThreadsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesInfoForAll<T>(Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesInfoForAllAsync<T>(Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesInfo<T>(string node_id, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesInfoAsync<T>(string node_id, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesInfoForAll<T>(string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesInfoForAllAsync<T>(string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesInfo<T>(string node_id, string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-info.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">A comma-separated list of metrics you wish returned. Leave empty to return all.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesInfoAsync<T>(string node_id, string metric, Func<NodesInfoRequestParameters, NodesInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesStatsForAll<T>(Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesStatsForAllAsync<T>(Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesStats<T>(string node_id, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesStatsAsync<T>(string node_id, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/stats/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesStatsForAll<T>(string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/stats/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesStatsForAllAsync<T>(string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesStats<T>(string node_id, string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesStatsAsync<T>(string node_id, string metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesStatsForAll<T>(string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/stats/{metric}/{index_metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesStatsForAllAsync<T>(string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> NodesStats<T>(string node_id, string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_nodes/{node_id}/stats/{metric}/{index_metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/cluster-nodes-stats.html </para>
		///</summary>
		///<param name="node_id">A comma-separated list of node IDs or names to limit the returned information; use `_local` to return information from the node you&#39;re connecting to, leave empty to get information from all nodes</param>
		///<param name="metric">Limit the information returned to the specified metrics</param>
		///<param name="index_metric">Limit the information returned for `indices` metric to the specific index metrics. Isn&#39;t used if `indices` (or `all`) metric isn&#39;t specified.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> NodesStatsAsync<T>(string node_id, string metric, string index_metric, Func<NodesStatsRequestParameters, NodesStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a HEAD on /
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/ </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Ping<T>(Func<PingRequestParameters, PingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a HEAD on /
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/ </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PingAsync<T>(Func<PingRequestParameters, PingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_scripts/{lang}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> PutScript<T>(string lang, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_scripts/{lang}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PutScriptAsync<T>(string lang, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_scripts/{lang}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> PutScript<T>(string lang, string id, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_scripts/{lang}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PutScriptAsync<T>(string lang, string id, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_scripts/{lang}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> PutScriptPost<T>(string lang, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_scripts/{lang}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PutScriptPostAsync<T>(string lang, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_scripts/{lang}/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> PutScriptPost<T>(string lang, string id, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_scripts/{lang}/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-scripting.html </para>
		///</summary>
		///<param name="lang">Script language</param>
		///<param name="id">Script ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PutScriptPostAsync<T>(string lang, string id, PostData<object> body, Func<PutScriptRequestParameters, PutScriptRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_search/template/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> PutTemplate<T>(string id, PostData<object> body, Func<PutSearchTemplateRequestParameters, PutSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_search/template/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PutTemplateAsync<T>(string id, PostData<object> body, Func<PutSearchTemplateRequestParameters, PutSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_search/template/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> PutTemplatePost<T>(string id, PostData<object> body, Func<PutSearchTemplateRequestParameters, PutSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_search/template/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">Template ID</param>
		///<param name="body">The document</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> PutTemplatePostAsync<T>(string id, PostData<object> body, Func<PutSearchTemplateRequestParameters, PutSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_reindex
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html </para>
		///</summary>
		///<param name="body">The search definition using the Query DSL and the prototype for the index request.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Reindex<T>(PostData<object> body, Func<ReindexOnServerRequestParameters, ReindexOnServerRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_reindex
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html </para>
		///</summary>
		///<param name="body">The search definition using the Query DSL and the prototype for the index request.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ReindexAsync<T>(PostData<object> body, Func<ReindexOnServerRequestParameters, ReindexOnServerRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_reindex/{task_id}/_rethrottle
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html </para>
		///</summary>
		///<param name="task_id">The task id to rethrottle</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ReindexRethrottle<T>(string task_id, Func<ReindexRethrottleRequestParameters, ReindexRethrottleRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_reindex/{task_id}/_rethrottle
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-reindex.html </para>
		///</summary>
		///<param name="task_id">The task id to rethrottle</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ReindexRethrottleAsync<T>(string task_id, Func<ReindexRethrottleRequestParameters, ReindexRethrottleRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_remote/info
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-remote-info.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> RemoteInfo<T>(Func<RemoteInfoRequestParameters, RemoteInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_remote/info
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/5.5/cluster-remote-info.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> RemoteInfoAsync<T>(Func<RemoteInfoRequestParameters, RemoteInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_render/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> RenderSearchTemplateGet<T>(Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_render/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> RenderSearchTemplateGetAsync<T>(Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_render/template/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">The id of the stored search template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> RenderSearchTemplateGet<T>(string id, Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_render/template/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">The id of the stored search template</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> RenderSearchTemplateGetAsync<T>(string id, Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_render/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> RenderSearchTemplate<T>(PostData<object> body, Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_render/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> RenderSearchTemplateAsync<T>(PostData<object> body, Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_render/template/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">The id of the stored search template</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> RenderSearchTemplate<T>(string id, PostData<object> body, Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_render/template/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elasticsearch.org/guide/en/elasticsearch/reference/master/search-template.html </para>
		///</summary>
		///<param name="id">The id of the stored search template</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> RenderSearchTemplateAsync<T>(string id, PostData<object> body, Func<RenderSearchTemplateRequestParameters, RenderSearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_search/scroll
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> ScrollGet<T>(Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_search/scroll
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ScrollGetAsync<T>(Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_search/scroll
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html </para>
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Scroll<T>(PostData<object> body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_search/scroll
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-request-scroll.html </para>
		///</summary>
		///<param name="body">The scroll ID if not passed by URL or query parameter.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> ScrollAsync<T>(PostData<object> body, Func<ScrollRequestParameters, ScrollRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_search
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchGet<T>(Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_search
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchGetAsync<T>(Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_search
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchGet<T>(string index, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_search
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchGetAsync<T>(string index, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_search
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchGet<T>(string index, string type, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_search
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchGetAsync<T>(string index, string type, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_search
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Search<T>(PostData<object> body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_search
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchAsync<T>(PostData<object> body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_search
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Search<T>(string index, PostData<object> body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_search
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchAsync<T>(string index, PostData<object> body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_search
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Search<T>(string index, string type, PostData<object> body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_search
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-search.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchAsync<T>(string index, string type, PostData<object> body, Func<SearchRequestParameters, SearchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_search_shards
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchShardsGet<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_search_shards
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchShardsGetAsync<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_search_shards
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchShardsGet<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_search_shards
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchShardsGetAsync<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_search_shards
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchShards<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_search_shards
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchShardsAsync<T>(Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_search_shards
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchShards<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_search_shards
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/search-shards.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchShardsAsync<T>(string index, Func<SearchShardsRequestParameters, SearchShardsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_search/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchTemplateGet<T>(Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_search/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchTemplateGetAsync<T>(Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_search/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchTemplateGet<T>(string index, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_search/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchTemplateGetAsync<T>(string index, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_search/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchTemplateGet<T>(string index, string type, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_search/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchTemplateGetAsync<T>(string index, string type, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_search/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchTemplate<T>(PostData<object> body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_search/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchTemplateAsync<T>(PostData<object> body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_search/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchTemplate<T>(string index, PostData<object> body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_search/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchTemplateAsync<T>(string index, PostData<object> body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_search/template
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SearchTemplate<T>(string index, string type, PostData<object> body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_search/template
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/search-template.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition template and its params</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SearchTemplateAsync<T>(string index, string type, PostData<object> body, Func<SearchTemplateRequestParameters, SearchTemplateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotCreate<T>(string repository, string snapshot, PostData<object> body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotCreateAsync<T>(string repository, string snapshot, PostData<object> body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotCreatePost<T>(string repository, string snapshot, PostData<object> body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">The snapshot definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotCreatePostAsync<T>(string repository, string snapshot, PostData<object> body, Func<SnapshotRequestParameters, SnapshotRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_snapshot/{repository}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotCreateRepository<T>(string repository, PostData<object> body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_snapshot/{repository}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotCreateRepositoryAsync<T>(string repository, PostData<object> body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotCreateRepositoryPost<T>(string repository, PostData<object> body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="body">The repository definition</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotCreateRepositoryPostAsync<T>(string repository, PostData<object> body, Func<CreateRepositoryRequestParameters, CreateRepositoryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotDelete<T>(string repository, string snapshot, Func<DeleteSnapshotRequestParameters, DeleteSnapshotRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotDeleteAsync<T>(string repository, string snapshot, Func<DeleteSnapshotRequestParameters, DeleteSnapshotRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_snapshot/{repository}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotDeleteRepository<T>(string repository, Func<DeleteRepositoryRequestParameters, DeleteRepositoryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_snapshot/{repository}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotDeleteRepositoryAsync<T>(string repository, Func<DeleteRepositoryRequestParameters, DeleteRepositoryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotGet<T>(string repository, string snapshot, Func<GetSnapshotRequestParameters, GetSnapshotRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotGetAsync<T>(string repository, string snapshot, Func<GetSnapshotRequestParameters, GetSnapshotRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_snapshot
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotGetRepository<T>(Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_snapshot
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotGetRepositoryAsync<T>(Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotGetRepository<T>(string repository, Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A comma-separated list of repository names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotGetRepositoryAsync<T>(string repository, Func<GetRepositoryRequestParameters, GetRepositoryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">Details of what to restore</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotRestore<T>(string repository, string snapshot, PostData<object> body, Func<RestoreRequestParameters, RestoreRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}/{snapshot}/_restore
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A snapshot name</param>
		///<param name="body">Details of what to restore</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotRestoreAsync<T>(string repository, string snapshot, PostData<object> body, Func<RestoreRequestParameters, RestoreRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_snapshot/_status
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotStatus<T>(Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_snapshot/_status
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotStatusAsync<T>(Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}/_status
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotStatus<T>(string repository, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}/_status
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotStatusAsync<T>(string repository, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotStatus<T>(string repository, string snapshot, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_snapshot/{repository}/{snapshot}/_status
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="snapshot">A comma-separated list of snapshot names</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotStatusAsync<T>(string repository, string snapshot, Func<SnapshotStatusRequestParameters, SnapshotStatusRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}/_verify
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> SnapshotVerifyRepository<T>(string repository, Func<VerifyRepositoryRequestParameters, VerifyRepositoryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_snapshot/{repository}/_verify
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/modules-snapshots.html </para>
		///</summary>
		///<param name="repository">A repository name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> SnapshotVerifyRepositoryAsync<T>(string repository, Func<VerifyRepositoryRequestParameters, VerifyRepositoryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_tasks/_cancel
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> TasksCancel<T>(Func<CancelTasksRequestParameters, CancelTasksRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_tasks/_cancel
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TasksCancelAsync<T>(Func<CancelTasksRequestParameters, CancelTasksRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_tasks/{task_id}/_cancel
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="task_id">Cancel the task with specified task id (node_id:task_number)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> TasksCancel<T>(string task_id, Func<CancelTasksRequestParameters, CancelTasksRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_tasks/{task_id}/_cancel
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="task_id">Cancel the task with specified task id (node_id:task_number)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TasksCancelAsync<T>(string task_id, Func<CancelTasksRequestParameters, CancelTasksRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_tasks/{task_id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="task_id">Return the task with specified id (node_id:task_number)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> TasksGet<T>(string task_id, Func<GetTaskRequestParameters, GetTaskRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_tasks/{task_id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="task_id">Return the task with specified id (node_id:task_number)</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TasksGetAsync<T>(string task_id, Func<GetTaskRequestParameters, GetTaskRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_tasks
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> TasksList<T>(Func<ListTasksRequestParameters, ListTasksRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_tasks
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/tasks.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TasksListAsync<T>(Func<ListTasksRequestParameters, ListTasksRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_termvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> TermvectorsGet<T>(string index, string type, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_termvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TermvectorsGetAsync<T>(string index, string type, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_termvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document, when not specified a doc param should be supplied.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> TermvectorsGet<T>(string index, string type, string id, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/{id}/_termvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document, when not specified a doc param should be supplied.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TermvectorsGetAsync<T>(string index, string type, string id, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_termvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Termvectors<T>(string index, string type, PostData<object> body, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_termvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TermvectorsAsync<T>(string index, string type, PostData<object> body, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_termvectors
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document, when not specified a doc param should be supplied.</param>
		///<param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Termvectors<T>(string index, string type, string id, PostData<object> body, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_termvectors
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-termvectors.html </para>
		///</summary>
		///<param name="index">The index in which the document resides.</param>
		///<param name="type">The type of the document.</param>
		///<param name="id">The id of the document, when not specified a doc param should be supplied.</param>
		///<param name="body">Define parameters and or supply a document to get termvectors for. See documentation.</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> TermvectorsAsync<T>(string index, string type, string id, PostData<object> body, Func<TermVectorsRequestParameters, TermVectorsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_update
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> Update<T>(string index, string type, string id, PostData<object> body, Func<UpdateRequestParameters, UpdateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/{id}/_update
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update.html </para>
		///</summary>
		///<param name="index">The name of the index</param>
		///<param name="type">The type of the document</param>
		///<param name="id">Document ID</param>
		///<param name="body">The request definition using either `script` or partial `doc`</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> UpdateAsync<T>(string index, string type, string id, PostData<object> body, Func<UpdateRequestParameters, UpdateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_update_by_query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> UpdateByQuery<T>(string index, PostData<object> body, Func<UpdateByQueryRequestParameters, UpdateByQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_update_by_query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> UpdateByQueryAsync<T>(string index, PostData<object> body, Func<UpdateByQueryRequestParameters, UpdateByQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_update_by_query
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> UpdateByQuery<T>(string index, string type, PostData<object> body, Func<UpdateByQueryRequestParameters, UpdateByQueryRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_update_by_query
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/master/docs-update-by-query.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">The search definition using the Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> UpdateByQueryAsync<T>(string index, string type, PostData<object> body, Func<UpdateByQueryRequestParameters, UpdateByQueryRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/_xpack/_graph/_explore
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackGraphExploreGet<T>(string index, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/_xpack/_graph/_explore
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackGraphExploreGetAsync<T>(string index, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_xpack/_graph/_explore
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackGraphExploreGet<T>(string index, string type, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /{index}/{type}/_xpack/_graph/_explore
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackGraphExploreGetAsync<T>(string index, string type, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/_xpack/_graph/_explore
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">Graph Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackGraphExplore<T>(string index, PostData<object> body, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/_xpack/_graph/_explore
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="body">Graph Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackGraphExploreAsync<T>(string index, PostData<object> body, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_xpack/_graph/_explore
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">Graph Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackGraphExplore<T>(string index, string type, PostData<object> body, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /{index}/{type}/_xpack/_graph/_explore
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/graph/current/explore.html </para>
		///</summary>
		///<param name="index">A comma-separated list of index names to search; use the special string `_all` or Indices.All to perform the operation on all indices</param>
		///<param name="type">A comma-separated list of document types to search; leave empty to perform the operation on all types</param>
		///<param name="body">Graph Query DSL</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackGraphExploreAsync<T>(string index, string type, PostData<object> body, Func<GraphExploreRequestParameters, GraphExploreRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackInfo<T>(Func<XPackInfoRequestParameters, XPackInfoRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/info-api.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackInfoAsync<T>(Func<XPackInfoRequestParameters, XPackInfoRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/usage
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: Retrieve information about xpack features usage </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackUsage<T>(Func<XPackUsageRequestParameters, XPackUsageRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/usage
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: Retrieve information about xpack features usage </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackUsageAsync<T>(Func<XPackUsageRequestParameters, XPackUsageRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/license
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/shield/current/license-management.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackLicenseDelete<T>(Func<DeleteLicenseRequestParameters, DeleteLicenseRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/license
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/shield/current/license-management.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackLicenseDeleteAsync<T>(Func<DeleteLicenseRequestParameters, DeleteLicenseRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/license
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/shield/current/license-management.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackLicenseGet<T>(Func<GetLicenseRequestParameters, GetLicenseRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/license
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/shield/current/license-management.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackLicenseGetAsync<T>(Func<GetLicenseRequestParameters, GetLicenseRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/license
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/shield/current/license-management.html </para>
		///</summary>
		///<param name="body">licenses to be installed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackLicensePost<T>(PostData<object> body, Func<PostLicenseRequestParameters, PostLicenseRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/license
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/shield/current/license-management.html </para>
		///</summary>
		///<param name="body">licenses to be installed</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackLicensePostAsync<T>(PostData<object> body, Func<PostLicenseRequestParameters, PostLicenseRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/_authenticate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-authenticate.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityAuthenticate<T>(Func<AuthenticateRequestParameters, AuthenticateRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/_authenticate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-authenticate.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityAuthenticateAsync<T>(Func<AuthenticateRequestParameters, AuthenticateRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}/_password
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="username">The username of the user to change the password for</param>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityChangePassword<T>(string username, PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}/_password
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="username">The username of the user to change the password for</param>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityChangePasswordAsync<T>(string username, PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/_password
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityChangePassword<T>(PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/_password
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityChangePasswordAsync<T>(PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}/_password
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="username">The username of the user to change the password for</param>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityChangePasswordPost<T>(string username, PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}/_password
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="username">The username of the user to change the password for</param>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityChangePasswordPostAsync<T>(string username, PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/_password
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityChangePasswordPost<T>(PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/_password
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-change-password.html </para>
		///</summary>
		///<param name="body">the new password for the user</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityChangePasswordPostAsync<T>(PostData<object> body, Func<ChangePasswordRequestParameters, ChangePasswordRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/realm/{realms}/_clear_cache
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/current/security-api-clear-cache.html </para>
		///</summary>
		///<param name="realms">Comma-separated list of realms to clear</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityClearCachedRealms<T>(string realms, Func<ClearCachedRealmsRequestParameters, ClearCachedRealmsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/realm/{realms}/_clear_cache
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/current/security-api-clear-cache.html </para>
		///</summary>
		///<param name="realms">Comma-separated list of realms to clear</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityClearCachedRealmsAsync<T>(string realms, Func<ClearCachedRealmsRequestParameters, ClearCachedRealmsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/role/{name}/_clear_cache
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-clear-role-cache </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityClearCachedRoles<T>(string name, Func<ClearCachedRolesRequestParameters, ClearCachedRolesRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/role/{name}/_clear_cache
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-clear-role-cache </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityClearCachedRolesAsync<T>(string name, Func<ClearCachedRolesRequestParameters, ClearCachedRolesRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/role/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-delete-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityDeleteRole<T>(string name, Func<DeleteRoleRequestParameters, DeleteRoleRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/role/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-delete-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityDeleteRoleAsync<T>(string name, Func<DeleteRoleRequestParameters, DeleteRoleRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-delete-role-mapping </para>
		///</summary>
		///<param name="name">Role-mapping name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityDeleteRoleMapping<T>(string name, Func<DeleteRoleMappingRequestParameters, DeleteRoleMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-delete-role-mapping </para>
		///</summary>
		///<param name="name">Role-mapping name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityDeleteRoleMappingAsync<T>(string name, Func<DeleteRoleMappingRequestParameters, DeleteRoleMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/user/{username}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-delete-user </para>
		///</summary>
		///<param name="username">username</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityDeleteUser<T>(string username, Func<DeleteUserRequestParameters, DeleteUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/user/{username}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-delete-user </para>
		///</summary>
		///<param name="username">username</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityDeleteUserAsync<T>(string username, Func<DeleteUserRequestParameters, DeleteUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}/_disable
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-disable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to disable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityDisableUser<T>(string username, Func<DisableUserRequestParameters, DisableUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}/_disable
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-disable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to disable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityDisableUserAsync<T>(string username, Func<DisableUserRequestParameters, DisableUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}/_disable
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-disable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to disable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityDisableUserPost<T>(string username, Func<DisableUserRequestParameters, DisableUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}/_disable
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-disable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to disable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityDisableUserPostAsync<T>(string username, Func<DisableUserRequestParameters, DisableUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}/_enable
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-enable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to enable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityEnableUser<T>(string username, Func<EnableUserRequestParameters, EnableUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}/_enable
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-enable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to enable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityEnableUserAsync<T>(string username, Func<EnableUserRequestParameters, EnableUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}/_enable
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-enable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to enable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityEnableUserPost<T>(string username, Func<EnableUserRequestParameters, EnableUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}/_enable
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-enable-user.html </para>
		///</summary>
		///<param name="username">The username of the user to enable</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityEnableUserPostAsync<T>(string username, Func<EnableUserRequestParameters, EnableUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-get-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetRole<T>(string name, Func<GetRoleRequestParameters, GetRoleRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-get-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetRoleAsync<T>(string name, Func<GetRoleRequestParameters, GetRoleRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-get-role </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetRole<T>(Func<GetRoleRequestParameters, GetRoleRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-get-role </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetRoleAsync<T>(Func<GetRoleRequestParameters, GetRoleRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-get-role-mapping </para>
		///</summary>
		///<param name="name">Role-Mapping name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetRoleMapping<T>(string name, Func<GetRoleMappingRequestParameters, GetRoleMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-get-role-mapping </para>
		///</summary>
		///<param name="name">Role-Mapping name</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetRoleMappingAsync<T>(string name, Func<GetRoleMappingRequestParameters, GetRoleMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role_mapping
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-get-role-mapping </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetRoleMapping<T>(Func<GetRoleMappingRequestParameters, GetRoleMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/role_mapping
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-get-role-mapping </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetRoleMappingAsync<T>(Func<GetRoleMappingRequestParameters, GetRoleMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/oauth2/token
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-tokens.html#security-api-get-token </para>
		///</summary>
		///<param name="body">The token request to get</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetToken<T>(PostData<object> body, Func<GetUserAccessTokenRequestParameters, GetUserAccessTokenRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/oauth2/token
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-tokens.html#security-api-get-token </para>
		///</summary>
		///<param name="body">The token request to get</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetTokenAsync<T>(PostData<object> body, Func<GetUserAccessTokenRequestParameters, GetUserAccessTokenRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/user/{username}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-get-user </para>
		///</summary>
		///<param name="username">A comma-separated list of usernames</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetUser<T>(string username, Func<GetUserRequestParameters, GetUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/user/{username}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-get-user </para>
		///</summary>
		///<param name="username">A comma-separated list of usernames</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetUserAsync<T>(string username, Func<GetUserRequestParameters, GetUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/user
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-get-user </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityGetUser<T>(Func<GetUserRequestParameters, GetUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/security/user
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-get-user </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityGetUserAsync<T>(Func<GetUserRequestParameters, GetUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/oauth2/token
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-tokens.html#security-api-invalidate-token </para>
		///</summary>
		///<param name="body">The token to invalidate</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityInvalidateToken<T>(PostData<object> body, Func<InvalidateUserAccessTokenRequestParameters, InvalidateUserAccessTokenRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/security/oauth2/token
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-tokens.html#security-api-invalidate-token </para>
		///</summary>
		///<param name="body">The token to invalidate</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityInvalidateTokenAsync<T>(PostData<object> body, Func<InvalidateUserAccessTokenRequestParameters, InvalidateUserAccessTokenRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/role/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-put-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityPutRole<T>(string name, PostData<object> body, Func<PutRoleRequestParameters, PutRoleRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/role/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-put-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityPutRoleAsync<T>(string name, PostData<object> body, Func<PutRoleRequestParameters, PutRoleRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/role/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-put-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityPutRolePost<T>(string name, PostData<object> body, Func<PutRoleRequestParameters, PutRoleRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/role/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-roles.html#security-api-put-role </para>
		///</summary>
		///<param name="name">Role name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityPutRolePostAsync<T>(string name, PostData<object> body, Func<PutRoleRequestParameters, PutRoleRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-put-role-mapping </para>
		///</summary>
		///<param name="name">Role-mapping name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityPutRoleMapping<T>(string name, PostData<object> body, Func<PutRoleMappingRequestParameters, PutRoleMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-put-role-mapping </para>
		///</summary>
		///<param name="name">Role-mapping name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityPutRoleMappingAsync<T>(string name, PostData<object> body, Func<PutRoleMappingRequestParameters, PutRoleMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-put-role-mapping </para>
		///</summary>
		///<param name="name">Role-mapping name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityPutRoleMappingPost<T>(string name, PostData<object> body, Func<PutRoleMappingRequestParameters, PutRoleMappingRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/role_mapping/{name}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-role-mapping.html#security-api-put-role-mapping </para>
		///</summary>
		///<param name="name">Role-mapping name</param>
		///<param name="body">The role to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityPutRoleMappingPostAsync<T>(string name, PostData<object> body, Func<PutRoleMappingRequestParameters, PutRoleMappingRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-put-user </para>
		///</summary>
		///<param name="username">The username of the User</param>
		///<param name="body">The user to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityPutUser<T>(string username, PostData<object> body, Func<PutUserRequestParameters, PutUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/security/user/{username}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-put-user </para>
		///</summary>
		///<param name="username">The username of the User</param>
		///<param name="body">The user to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityPutUserAsync<T>(string username, PostData<object> body, Func<PutUserRequestParameters, PutUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-put-user </para>
		///</summary>
		///<param name="username">The username of the User</param>
		///<param name="body">The user to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackSecurityPutUserPost<T>(string username, PostData<object> body, Func<PutUserRequestParameters, PutUserRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/security/user/{username}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/x-pack/master/security-api-users.html#security-api-put-user </para>
		///</summary>
		///<param name="username">The username of the User</param>
		///<param name="body">The user to add</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackSecurityPutUserPostAsync<T>(string username, PostData<object> body, Func<PutUserRequestParameters, PutUserRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_ack
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherAckWatch<T>(string watch_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_ack
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherAckWatchAsync<T>(string watch_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_ack/{action_id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="action_id">A comma-separated list of the action ids to be acked</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherAckWatch<T>(string watch_id, string action_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_ack/{action_id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="action_id">A comma-separated list of the action ids to be acked</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherAckWatchAsync<T>(string watch_id, string action_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_ack
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherAckWatchPost<T>(string watch_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_ack
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherAckWatchPostAsync<T>(string watch_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_ack/{action_id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="action_id">A comma-separated list of the action ids to be acked</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherAckWatchPost<T>(string watch_id, string action_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_ack/{action_id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-ack-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="action_id">A comma-separated list of the action ids to be acked</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherAckWatchPostAsync<T>(string watch_id, string action_id, Func<AcknowledgeWatchRequestParameters, AcknowledgeWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_activate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherActivateWatch<T>(string watch_id, Func<ActivateWatchRequestParameters, ActivateWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_activate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherActivateWatchAsync<T>(string watch_id, Func<ActivateWatchRequestParameters, ActivateWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_activate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherActivateWatchPost<T>(string watch_id, Func<ActivateWatchRequestParameters, ActivateWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_activate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-activate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherActivateWatchPostAsync<T>(string watch_id, Func<ActivateWatchRequestParameters, ActivateWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_deactivate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherDeactivateWatch<T>(string watch_id, Func<DeactivateWatchRequestParameters, DeactivateWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{watch_id}/_deactivate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherDeactivateWatchAsync<T>(string watch_id, Func<DeactivateWatchRequestParameters, DeactivateWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_deactivate
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherDeactivateWatchPost<T>(string watch_id, Func<DeactivateWatchRequestParameters, DeactivateWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{watch_id}/_deactivate
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: https://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-deactivate-watch.html </para>
		///</summary>
		///<param name="watch_id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherDeactivateWatchPostAsync<T>(string watch_id, Func<DeactivateWatchRequestParameters, DeactivateWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/watcher/watch/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherDeleteWatch<T>(string id, Func<DeleteWatchRequestParameters, DeleteWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a DELETE on /_xpack/watcher/watch/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-delete-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherDeleteWatchAsync<T>(string id, Func<DeleteWatchRequestParameters, DeleteWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{id}/_execute
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherExecuteWatch<T>(string id, PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{id}/_execute
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherExecuteWatchAsync<T>(string id, PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/_execute
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherExecuteWatch<T>(PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/_execute
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherExecuteWatchAsync<T>(PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{id}/_execute
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherExecuteWatchPost<T>(string id, PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{id}/_execute
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherExecuteWatchPostAsync<T>(string id, PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/_execute
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherExecuteWatchPost<T>(PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/_execute
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-execute-watch.html </para>
		///</summary>
		///<param name="body">Execution control</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherExecuteWatchPostAsync<T>(PostData<object> body, Func<ExecuteWatchRequestParameters, ExecuteWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/watcher/watch/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherGetWatch<T>(string id, Func<GetWatchRequestParameters, GetWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/watcher/watch/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-get-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherGetWatchAsync<T>(string id, Func<GetWatchRequestParameters, GetWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">The watch</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherPutWatch<T>(string id, PostData<object> body, Func<PutWatchRequestParameters, PutWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a PUT on /_xpack/watcher/watch/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">The watch</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherPutWatchAsync<T>(string id, PostData<object> body, Func<PutWatchRequestParameters, PutWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{id}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">The watch</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherPutWatchPost<T>(string id, PostData<object> body, Func<PutWatchRequestParameters, PutWatchRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/watch/{id}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-put-watch.html </para>
		///</summary>
		///<param name="id">Watch ID</param>
		///<param name="body">The watch</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherPutWatchPostAsync<T>(string id, PostData<object> body, Func<PutWatchRequestParameters, PutWatchRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/_restart
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-restart.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherRestart<T>(Func<RestartWatcherRequestParameters, RestartWatcherRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/_restart
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-restart.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherRestartAsync<T>(Func<RestartWatcherRequestParameters, RestartWatcherRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/_start
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherStart<T>(Func<StartWatcherRequestParameters, StartWatcherRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/_start
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-start.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherStartAsync<T>(Func<StartWatcherRequestParameters, StartWatcherRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/watcher/stats
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherStats<T>(Func<WatcherStatsRequestParameters, WatcherStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/watcher/stats
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherStatsAsync<T>(Func<WatcherStatsRequestParameters, WatcherStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a GET on /_xpack/watcher/stats/{watcher_stats_metric}
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html </para>
		///</summary>
		///<param name="watcher_stats_metric">Controls what additional stat metrics should be include in the response</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherStats<T>(WatcherStatsMetric watcher_stats_metric, Func<WatcherStatsRequestParameters, WatcherStatsRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a GET on /_xpack/watcher/stats/{watcher_stats_metric}
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stats.html </para>
		///</summary>
		///<param name="watcher_stats_metric">Controls what additional stat metrics should be include in the response</param>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherStatsAsync<T>(WatcherStatsMetric watcher_stats_metric, Func<WatcherStatsRequestParameters, WatcherStatsRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/_stop
		///<para></para>Returns: ElasticsearchResponse&lt;T&gt; where the behavior depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stop.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		ElasticsearchResponse<T> XpackWatcherStop<T>(Func<StopWatcherRequestParameters, StopWatcherRequestParameters> requestParameters = null) where T : class;
		
		///<summary>Represents a POST on /_xpack/watcher/_stop
		///<para></para>Returns: A task of ElasticsearchResponse&lt;T&gt; where the behaviour depends on the type of T:
		///<para> - T, an object you own that the elasticsearch response will be deserialized to </para>
		///<para> - byte[], no deserialization, but the response stream will be closed </para>
		///<para> - Stream, no deserialization, response stream is your responsibility </para>
		///<para> - VoidResponse, no deserialization, response stream never read and closed </para>
		///<para> - DynamicDictionary, a dynamic aware dictionary that can be safely traversed to any depth </para>
		///<para>See also: http://www.elastic.co/guide/en/elasticsearch/reference/current/watcher-api-stop.html </para>
		///</summary>
		///<param name="requestParameters">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>
		Task<ElasticsearchResponse<T>> XpackWatcherStopAsync<T>(Func<StopWatcherRequestParameters, StopWatcherRequestParameters> requestParameters = null, CancellationToken cancellationToken = default(CancellationToken)) where T : class;
		
	}
}
