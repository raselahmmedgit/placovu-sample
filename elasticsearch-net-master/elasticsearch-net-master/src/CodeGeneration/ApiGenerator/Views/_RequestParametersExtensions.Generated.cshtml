@using System.Collections.Generic
@using System.Linq
@using ApiGenerator.Domain
@using ApiGenerator
@using CsQuery.Engine.PseudoClassSelectors

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Linq.Expressions;
using Elasticsearch.Net;
using Nest;

//This file contains all the typed request parameters that are generated of the client spec.
//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/@Model.Commit/rest-api-spec
//Generated from commit @Model.Commit

namespace Nest
{
	public static class RequestPameterExtensions
	{
	@foreach (CsharpMethod method in Model.CsharpMethodsWithQueryStringInfo)
    {
        if (!method.Url.Params.Any(p => p.Key.Contains("field") || p.Key.Contains("source_")))
        {
            continue;
        }
        foreach (KeyValuePair<string, ApiQueryParameters> kv in method.Url.Params)
        {
            if (method.Url.Parts.ContainsKey(kv.Key))
            {
				continue;
            }

            var mm = kv.Key;
            var fieldType = kv.Value.CsharpType(kv.Key).Replace("params", "");
            var setter = mm;
            var isFields = (mm.Contains("fields") || mm.Contains("source_include") || mm.Contains("source_exclude"));
            if (isFields && fieldType.Contains("string"))
            {
                fieldType = "IEnumerable<Field>";
                setter = mm + ".Select(f=>(Field)f)";
            }
            else if (mm.Contains("field") && fieldType.Contains("string"))
            {
                fieldType = "Field";
            }
            if (isFields && fieldType.Contains("Field"))
            {
		<text>
		///<summary>@kv.Value.Description</summary>
		internal static @method.QueryStringParamName _@(mm.ToPascalCase())@(Raw("<T>"))(this @method.QueryStringParamName qs, @Raw("IEnumerable<Expression<Func<T, object>>> ") @mm) where T : class =>
			qs.AddQueryString("@kv.Value.OriginalQueryStringParamName", @mm@Raw(".Select(e=>(Field)e)"));</text>
		}
		else if (mm.Contains("field") && fieldType.Contains("Field"))
		{
		<text>
		///<summary>@kv.Value.Description</summary>
		internal static @method.QueryStringParamName _@(mm.ToPascalCase())@(Raw("<T>"))(this @method.QueryStringParamName qs, @Raw("Expression<Func<T, object>>") @mm) where T : class =>
			qs.AddQueryString("@mm", (Field)@mm);</text>
		}
	}
	}
	}
}
 