using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using Elasticsearch.Net;

//This file is automatically generated from https://github.com/elastic/elasticsearch/tree/@Model.Commit/rest-api-spec
//Generated from commit @Model.Commit

namespace Elasticsearch.Net
{
	///<summary>
	///Raw operations with elasticsearch
	///<pre>
	///This file is automatically generated from https://github.com/elastic/elasticsearch/tree/@Model.Commit/rest-api-spec
	///</pre>
	///<pre>
	///Generated of commit @Model.Commit
	///</pre>
	///</summary>
	public partial interface IElasticLowLevelClient
	{
		//IConnection Connection { get; }
		//IConnectionConfigurationValues Settings { get; }
		//IElasticsearchSerializer Serializer { get; }

		@foreach(var kv in Model.Endpoints)
		{
			var identifier = kv.Key;
			var endpoint = kv.Value;
			foreach(var method in endpoint.GetCsharpMethods())
			{
		<text>///<summary>Represents a @method.HttpMethod on @method.Path
		///<para></para>Returns: @Raw(method.ReturnDescription)
		///<para>See also: @method.Documentation </para>
		///</summary></text>
		foreach (var part in method.Parts)
		{
		<text>@Raw("///<param name=\""+part.Name+"\">")@part.Description@Raw("</param>")</text>
		}
		<text>@Raw(@"///<param name=""requestParameters"">A func that allows you to describe the querystring parameters &amp; request specific connection settings.</param>")
		@Raw(method.ReturnType) @(method.FullName)@(Raw(method.ReturnTypeGeneric))(@Raw(method.Arguments)) where @method.CallTypeGeneric : class;
		</text>
			}
		}
	}
}
